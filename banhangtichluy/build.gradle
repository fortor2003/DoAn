plugins {
    id 'java'
    id 'org.springframework.boot' version '2.4.4'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '8'

ext {
    querydslVersion = '4.3.1'
    jjwtVersion = '0.11.2'
    javafakerVersion = '1.0.2'
}

apply plugin: 'war'

sourceSets {
    main {
        java {
            srcDir "$buildDir/generated"
        }
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation "io.jsonwebtoken:jjwt-api:${jjwtVersion}"
    implementation "io.jsonwebtoken:jjwt-impl:${jjwtVersion}"
    implementation "io.jsonwebtoken:jjwt-jackson:${jjwtVersion}"
    implementation 'org.flywaydb:flyway-core'
    implementation "com.github.javafaker:javafaker:${javafakerVersion}"
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation "com.querydsl:querydsl-sql:${querydslVersion}"

    compileOnly 'org.projectlombok:lombok'
    compile "com.querydsl:querydsl-apt:${querydslVersion}"
//    compile "com.querydsl:querydsl-core:${querydslVersion}"
    compile "com.querydsl:querydsl-jpa:${querydslVersion}"

    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.hibernate:hibernate-jpamodelgen'
    annotationProcessor  'javax.persistence:javax.persistence-api'
    annotationProcessor  'javax.annotation:javax.annotation-api'
    annotationProcessor "com.querydsl:querydsl-apt:${querydslVersion}:jpa"

    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
}

test {
    useJUnitPlatform()
}

bootRun {
    systemProperty 'spring.profiles.active', findProperty('env') ?: 'dev'
}